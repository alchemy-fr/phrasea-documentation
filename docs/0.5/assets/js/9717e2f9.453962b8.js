"use strict";(self.webpackChunkphrasea=self.webpackChunkphrasea||[]).push([[6729],{773:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"phrasea/Infra/networks","title":"Private/public networks","description":"Use cases","source":"@site/docs/phrasea/Infra/networks.md","sourceDirName":"phrasea/Infra","slug":"/phrasea/Infra/networks","permalink":"/docs/phrasea/Infra/networks","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Deploy stack to minikube","permalink":"/docs/phrasea/Infra/minikube"},"next":{"title":"Setup (with docker-compose)","permalink":"/docs/phrasea/setup"}}');var r=a(86070),s=a(6738);const o={},i="Private/public networks",l={},c=[{value:"Use cases",id:"use-cases",level:2},{value:"Phraseanet in a private network, Expose/Uploader in a public one:",id:"phraseanet-in-a-private-network-exposeuploader-in-a-public-one",level:3}];function p(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"privatepublic-networks",children:"Private/public networks"})}),"\n",(0,r.jsx)(t.h2,{id:"use-cases",children:"Use cases"}),"\n",(0,r.jsx)(t.h3,{id:"phraseanet-in-a-private-network-exposeuploader-in-a-public-one",children:"Phraseanet in a private network, Expose/Uploader in a public one:"}),"\n",(0,r.jsx)(t.p,{children:"Given a private network where Phraseanet (core) lives.\nWe need to provide an Uploader to external employees (which can't access the private network)."}),"\n",(0,r.jsx)(t.p,{children:"In that case, Uploader service can't talk to Phraseanet in order to push new upload commits.\nPull mode is required: Phraseanet needs to fetch new commits regularly.\nAt this point, we need to authorize Phraseanet to list Uploader's commits."}),"\n",(0,r.jsxs)(t.p,{children:["The solution is to run a Keycloak service in the public network and to declare\nPhraseanet as a OAuth client with the grant_type ",(0,r.jsx)(t.code,{children:"client_credentials"})," (M2M authentication).\nSo Phraseanet will be able to ask Keycloak an access_token and to authenticate beside Uploader."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"External Uploader",src:a(60426).A+"",title:"External Uploader",width:"790",height:"886"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sequence",children:'title External Uploader\n\nnote over Phraseanet: Private network\nnote over Keycloak: Public network\nnote over Uploader: Public network\n\nalt Need to get commit list\nPhraseanet->Keycloak: GET https://keycloak.public.com/oauth/token\nnote left of Keycloak: {"grant_type":"client_credential",...}\nKeycloak->Phraseanet: Access token response\nnote right of Phraseanet: {"access_token":"s3cr3t!token",...}\nPhraseanet->Uploader: GET https://uploader.public.com/commits\nnote left of Uploader: Authorization: Bearer s3cr3t!token\nUploader->Phraseanet: Commit list response\nnote right of Phraseanet: [{"id":"46.."}]\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},60426:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/external-uploader-1e6575e560758a1cb120cfaa73e987ad.png"}}]);