"use strict";(self.webpackChunkphrasea=self.webpackChunkphrasea||[]).push([[2282],{78969:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"phrasea/Developement/dev","title":"Development setup","description":"Prerequisites","source":"@site/docs/phrasea/Developement/dev.md","sourceDirName":"phrasea/Developement","slug":"/phrasea/Developement/dev","permalink":"/docs/phrasea/Developement/dev","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Permissions","permalink":"/docs/phrasea/Databox/permissions"},"next":{"title":"Upgrade PostgreSQL server version","permalink":"/docs/phrasea/Developement/postgre-migration"}}');var o=n(86070),i=n(6738);const a={},d="Development setup",c={},t=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"Create your root CA for dev",id:"create-your-root-ca-for-dev",level:3},{value:"Add dev DNS to your host",id:"add-dev-dns-to-your-host",level:3},{value:"Configure env vars",id:"configure-env-vars",level:3},{value:"Composer caching in Docker",id:"composer-caching-in-docker",level:3},{value:"Further reading",id:"further-reading",level:2}];function l(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"development-setup",children:"Development setup"})}),"\n",(0,o.jsx)(r.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(r.p,{children:["You have read ",(0,o.jsx)(r.a,{href:"./setup.md",children:"setup guide"})]}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.em,{children:"mkcert"})," is installed."]}),"\n",(0,o.jsxs)(r.p,{children:["Install ",(0,o.jsx)(r.code,{children:"mkcert"}),":"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"sudo apt-get install wget libnss3-tools\nwget https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64\nsudo mv mkcert-v1.4.3-linux-amd64 /usr/bin/mkcert\nsudo chmod +x /usr/bin/mkcert\n"})}),"\n",(0,o.jsx)(r.h2,{id:"steps",children:"Steps"}),"\n",(0,o.jsx)(r.h3,{id:"create-your-root-ca-for-dev",children:"Create your root CA for dev"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"mkcert -install # If never done before\nbin/dev/make-cert.sh\n"})}),"\n",(0,o.jsx)(r.p,{children:"If you're installing self-signed certificate to a remote machine, get to root CA from:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"cat $(mkcert -CAROOT)/rootCA.pem\n"})}),"\n",(0,o.jsx)(r.p,{children:"Then add it to your browser!"}),"\n",(0,o.jsx)(r.h3,{id:"add-dev-dns-to-your-host",children:"Add dev DNS to your host"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"sudo bin/dev/append-etc-hosts.sh\n"})}),"\n",(0,o.jsx)(r.h3,{id:"configure-env-vars",children:"Configure env vars"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"# bin/build.sh optimize build order in order to maximize benefit of docker layer caching:\nbin/build.sh\n"})}),"\n",(0,o.jsx)(r.p,{children:"Configure your local env var:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-dotenv",children:"APP_ENV=dev\nDEV_MODE=true\nCOMPOSE_FILE=docker-compose.yml:docker-compose.dev.yml\nCOMPOSE_PROFILES=...\nVERIFY_SSL=false\n"})}),"\n",(0,o.jsx)(r.p,{children:"Build the dev container and install app dependencies"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"dc build dev\n\ndc run --rm dev bin/dev/composer-install.sh\ndc run --rm dev pnpm install\n"})}),"\n",(0,o.jsx)(r.h3,{id:"composer-caching-in-docker",children:"Composer caching in Docker"}),"\n",(0,o.jsxs)(r.p,{children:["In order to keep vendor docker layer and to prevent composer from downloading all packages every time an app file change\nwe use a step (docker layer) for composer install a warm composer cache before copying all app files.\nWe keep a ",(0,o.jsx)(r.code,{children:"composer.json"})," and ",(0,o.jsx)(r.code,{children:"composer.lock"})," version isolated (in ./docker/caching of each PHP service)."]}),"\n",(0,o.jsx)(r.p,{children:"You can update both this two  files in order to keep a fresh cache.\nBecause local packages (repositories with type=path) will neither be copied nor cached, we need to remove them from the requirements."}),"\n",(0,o.jsx)(r.p,{children:"You can use the following helper to do so automatically:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"# Usage\n# optimize-composer-docker-cache [app-path]\n./bin/optimize-composer-docker-cache ./databox/api\n\n# You can update multiple projects at the same time\n./bin/optimize-composer-docker-cache ./databox/api ./uploader/api\n"})}),"\n",(0,o.jsx)(r.h2,{id:"further-reading",children:"Further reading"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"/docs/phrasea/Developement/xdebug",children:"Debug application with XDEBUG"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"./minikube.md",children:"Deploy to minikube"})}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);